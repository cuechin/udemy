Modern React with Redux [2023 Update]

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*- SECTION 2 *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

* Props System
	- Pass data from a parent to a child
	- Allows  parent to configure each child differently (show different text, different styles, etc)
	- One way flow of data. Child can't push props back up.
	- Like 25% of understanding React.
* Communication with Props
	1. Add attributes to a JSX element.
	2. React collects the attributes and puts them in an object.
	3. Props object shows up as the first argument to the child component function.
	4. We use the props however we wish.
* React developer tools extension for Chrome: https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi
* When we import a non JavaScript file, we have to ass in the extension file (.png, .jpge, etc)
* Development server exposes some built files out of our project to the browser. Dev server is serving up the indexed HTML file every time we try to access our app.
* The primary JavaScript file that gets loaded up is we usually refer to as the bundled JS file.
* If the image is less than 10,000 bytes or about 9.7kb (kilobytes) then the image's raw data is taken. It is converted into a format called base64 and that string represents the entire image.
* If the image is larger than 9.7kb, then it gets treated as a separate file and it will be served up as a separate file by the development server.
* alt prop: are used by people who make use of screen readers. Screen readers are pieces of software that take a look at the content on a screen and convert that content into audio.
* bulma.io (https://bulma.io/) a CSS library.
* NPM: Node Package Manager, SAS:Â a variant of CSS.

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*- SECTION 3 *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

* Event System: detect a user clicking the button, dragging an element, typing and so on.
	1. Decide what kind of event you want to watch for.
		- Listing of event names: https://reactjs.org/docs/events.html
		- onClick: A user clicks on something.
		- onChange: A user types in a text input or otherwise changes some form element such as a text area, radio buttons and so on.
	2. Create a function. Usually called an event handler or callback function.
		- It is a function that's going to be called automatically at some future point in time when user actually clicks on something or types or whatever else.
	3. Name the function using pattern of handle + EventName (Not a requirement! Community convention)
	4. Pass the function as a prop to a plain element.
		- Plane element: div, button, span, etc.
	5. Make sure you pass the function using valid event name ('onClick', 'onMouseOver', etc).
	6. Make sure you pass a reference to the function (don't call it!!).
		- When we put in the prop right here or the function name, we are not going to put in a set of parentheses right after it. Only the function name.
			const doGreeting = () => { return 'hi there' }
			console.log( doGreeting ); => Logs the 'doGreeting' function. Does not call it.
			console.log( doGreeting() ); => Immediately calls 'doGreeting' function and logs the return value.
		- GOOD: In a button example, gives the button the whole function so the button can call the function in the future, when the button is clicked.
			function App() {
				const handleClick = () => {
					console.log("Button was clicked!");
				};

				return (
					<div>
						<button onClick={handleClick}>Add Animal</button>
					</div>
				);
			}
		- PROBABLY BAD: Immediately calls 'onButtonClick' and gives the button the return value.
			onClick={handleClick()}
* State System: Update the content on the screen.
	- Data that changes as the user interacts with our app.
	- When this data changes. React will update content on the screen automatically.
	- This is the one-and-only way we can change what content React shows.
	- const [count, setCount] = useState(0);
		[count, setCount] : Array destructuring. Fancy way to get access to the piece of state + setter.
		useState(0) : The piece of state! Starts as 0, changes over time. When we call it, we're going to get back an array that has two elements inside of it.
		setCount : Setter function. Used to update our piece of state.
		count : Default value for this piece of state.
	1. Define a piece of state with the useSate function.
	2. Give a value to the useState function. This is the default, starting value for our piece of state.
	3. Use the state in some way in our component (often in the returned JSX).
	4. When user does something, update the piece of state. Causes React to rerender the component.
	- Use the state system when you want to update content on the screen.
	- Calling 'useState' defines a new piece of state.
	- The first argument to 'useState' is used as the initial value.
	- Updating state is done only using the setter function.
	- Calling the setter function causes React to rerender the component.
* When you import an CSS file without a variable is telling our development server that we want to take all the CSS from inside that file and load it in the browser when we load up our project.